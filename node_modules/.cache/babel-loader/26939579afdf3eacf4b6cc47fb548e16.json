{"remainingRequest":"C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\src\\utils\\auth.js","dependencies":[{"path":"C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\src\\utils\\auth.js","mtime":1551695851031},{"path":"C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es7.promise.finally\";\nvar tokenName = \"Authorization\";\nvar loginPath = \"/login\";\n/**\r\n * @return {(string|null)} the auth token if found, null otherwise\r\n */\n\nvar getLocalToken = function getLocalToken() {\n  return window.localStorage.getItem(tokenName);\n};\n/**\r\n * \r\n * @param {*} token \r\n * @return {undefined} void return\r\n */\n\n\nvar setLocalToken = function setLocalToken(token) {\n  window.localStorage.setItem(tokenName, \"Bearer \" + token);\n};\n/**\r\n * \r\n * @return {undefined} void return\r\n */\n\n\nvar deleteLocalToken = function deleteLocalToken() {\n  window.localStorage.removeItem(tokenName);\n};\n\nvar logUserOut = function logUserOut(vm) {\n  deleteLocalToken();\n  vm.$router.push({\n    path: loginPath\n  });\n};\n/**\r\n * \r\n * @return {boolean} True if user is logged in, false otherwise\r\n */\n\n\nvar isLoggedIn = function isLoggedIn() {\n  return Boolean(getLocalToken());\n};\n\nexport default {\n  deleteLocalToken: deleteLocalToken,\n  getLocalToken: getLocalToken,\n  isLoggedIn: isLoggedIn,\n  logUserOut: logUserOut,\n  setLocalToken: setLocalToken\n};",{"version":3,"sources":["C:\\Users\\blohm\\OneDrive\\Bureau\\capgemini-master\\src\\utils\\auth.js"],"names":["tokenName","loginPath","getLocalToken","window","localStorage","getItem","setLocalToken","token","setItem","deleteLocalToken","removeItem","logUserOut","vm","$router","push","path","isLoggedIn","Boolean"],"mappings":";;;;AAAA,IAAMA,SAAS,GAAG,eAAlB;AACA,IAAMC,SAAS,GAAG,QAAlB;AAEA;;;;AAGA,IAAMC,aAAa,GAAG,SAASA,aAAT,GAAyB;AAC7C,SAAOC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BL,SAA5B,CAAP;AACD,CAFD;AAIA;;;;;;;AAKA,IAAMM,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8B;AAClDJ,EAAAA,MAAM,CAACC,YAAP,CAAoBI,OAApB,CAA4BR,SAA5B,EAAsC,YAAUO,KAAhD;AACD,CAFD;AAIA;;;;;;AAIA,IAAME,gBAAgB,GAAG,SAASA,gBAAT,GAA4B;AACnDN,EAAAA,MAAM,CAACC,YAAP,CAAoBM,UAApB,CAA+BV,SAA/B;AACD,CAFD;;AAIA,IAAMW,UAAU,GAAG,SAASA,UAAT,CAAoBC,EAApB,EAAwB;AACzCH,EAAAA,gBAAgB;AAChBG,EAAAA,EAAE,CAACC,OAAH,CAAWC,IAAX,CAAgB;AAAEC,IAAAA,IAAI,EAAEd;AAAR,GAAhB;AACD,CAHD;AAKA;;;;;;AAIA,IAAMe,UAAU,GAAG,SAASA,UAAT,GAAsB;AACvC,SAAOC,OAAO,CAACf,aAAa,EAAd,CAAd;AACD,CAFD;;AAIA,eAAe;AACbO,EAAAA,gBAAgB,EAAhBA,gBADa;AAEbP,EAAAA,aAAa,EAAbA,aAFa;AAGbc,EAAAA,UAAU,EAAVA,UAHa;AAIbL,EAAAA,UAAU,EAAVA,UAJa;AAKbL,EAAAA,aAAa,EAAbA;AALa,CAAf","sourcesContent":["const tokenName = \"Authorization\";\r\nconst loginPath = \"/login\";\r\n\r\n/**\r\n * @return {(string|null)} the auth token if found, null otherwise\r\n */\r\nconst getLocalToken = function getLocalToken() {\r\n  return window.localStorage.getItem(tokenName);\r\n};\r\n\r\n/**\r\n * \r\n * @param {*} token \r\n * @return {undefined} void return\r\n */\r\nconst setLocalToken = function setLocalToken(token) {\r\n  window.localStorage.setItem(tokenName,\"Bearer \"+token);\r\n};\r\n\r\n/**\r\n * \r\n * @return {undefined} void return\r\n */\r\nconst deleteLocalToken = function deleteLocalToken() {\r\n  window.localStorage.removeItem(tokenName);\r\n};\r\n\r\nconst logUserOut = function logUserOut(vm) {\r\n  deleteLocalToken();\r\n  vm.$router.push({ path: loginPath });\r\n};\r\n\r\n/**\r\n * \r\n * @return {boolean} True if user is logged in, false otherwise\r\n */\r\nconst isLoggedIn = function isLoggedIn() {\r\n  return Boolean(getLocalToken());\r\n};\r\n\r\nexport default {\r\n  deleteLocalToken,\r\n  getLocalToken,\r\n  isLoggedIn,\r\n  logUserOut,\r\n  setLocalToken\r\n};"]}]}